{"version":3,"file":"static/js/650.6d295227.chunk.js","mappings":"wOAIaA,EAAoB,WAAoB,IAAnBC,EAAkB,uDAAP,GAC3C,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAeC,EAAAA,EAAAA,MAAPC,EAAR,EAAQA,GAkBR,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMC,GAAN,8EACfP,GAAa,GADE,mBAGcQ,EAAAA,EAAAA,IAAeD,EAASZ,GAHtC,OAGPc,EAHO,OAIbX,EAAaW,GAJA,gDAMbP,EAAS,KAAMQ,SANF,yBAQbV,GAAa,GARA,4EAAH,sDAYdM,EAASF,EACV,GAAE,CAACA,EAAIT,IAED,CAAEE,UAAAA,EAAWE,UAAAA,EAAWE,MAAAA,EAChC,C,kGCxBYU,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3B,OACE,SAAC,IAAD,UACGA,EAAKC,QAAQC,OAAS,GACrB,wBACGF,EAAKC,QAAQE,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,2BACE,qCAAaD,MACb,uCAAeC,OAFRb,EADO,OAQpB,qEAIP,E,SCLD,EAXoB,WAClB,OAAwCV,EAAAA,EAAAA,GAAkB,YAAlDG,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,MAC9B,OACE,gCACGF,IAAa,SAACmB,EAAA,EAAD,IACbjB,IAAS,oEACTJ,IAAa,SAACc,EAAD,CAAYC,KAAMf,MAGrC,C","sources":["hooks/useFetchMovieInfo.js","components/ReviewList/ReviewList.jsx","pages/ReviewsPage/ReviewsPage.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieById } from 'fetchAPI/fetchAPI';\n\nexport const useFetchMovieInfo = (endpoint = '') => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await fetchMovieById(movieId, endpoint);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(id);\n  }, [id, endpoint]);\n\n  return { movieInfo, isLoading, error };\n};\n","import PropTypes from 'prop-types';\nimport { MainContainer } from 'utils/GlobalStyle';\n\nexport const ReviewList = ({ info }) => {\n  return (\n    <MainContainer>\n      {info.results.length > 0 ? (\n        <ul>\n          {info.results.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>Character: {content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </MainContainer>\n  );\n};\n\nReviewList.propTypes = {\n  info: PropTypes.shape({\n    results: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { ReviewList } from 'components/ReviewList/ReviewList';\nimport { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\n\nconst ReviewsPage = () => {\n  const { movieInfo, isLoading, error } = useFetchMovieInfo('/reviews');\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>We don't have any reviews for this movie</p>}\n      {movieInfo && <ReviewList info={movieInfo} />}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["useFetchMovieInfo","endpoint","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","useParams","id","useEffect","getMovie","movieId","fetchMovieById","movieDetails","message","ReviewList","info","results","length","map","author","content","Loader"],"sourceRoot":""}